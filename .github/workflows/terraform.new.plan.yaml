# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the master branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
#
#
#
#                                           SETUP
#
# 1. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#########################################


name: Terraform Plan

on:
  workflow_call:
    inputs:
      terraform_project:
        description: 'The TF workspace prefix/tag'
        required: true
        type: string
      env:
        description: 'The deployment environment'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
      enable_TFSEC:
        description: '(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations'
        required: false
        type: boolean
        default: false

    secrets:
      TF_API_TOKEN:
        required: true


jobs:
  build-plan:
    name: "Terraform Build Plan"
    runs-on: ubuntu-latest

     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

     # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    -name: parameters
     run: |
     echo " parameters- Enable TFSEC=${{ inputs.enable_TFSEC }} "



    # static code analysis tool TFSEC
    - name: Scan IaC - tfsec
      if: ${{ inputs.enable_TFSEC == true }}
      uses: tfsec/tfsec-sarif-action@v0.0.6
      with:
        sarif_file: tfsec.sarif
        tfvars_file: './variables/${{ inputs.tf_vars_file }}'


    # Uploads results to GitHub Security
    - name: Upload SARIF file
      if: ${{ inputs.enable_TFSEC == true }}
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: tfsec.sarif


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf_version }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        export TF_WORKSPACE="${{ inputs.terraform_project }}-${{ inputs.env }}"
        terraform init -input=false
        terraform workspace show

    # Terraform validate verify whether a configuration is syntactically valid and internally consistent
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        export TF_WORKSPACE="${{ inputs.terraform_project }}-${{ inputs.env }}"
        cp variables/${{ inputs.tf_vars_file }} ./
        echo "listing files"
        ls -la
        terraform plan -input=false -no-color
      continue-on-error: true

    # adds a comment to the pull request with the results of the format, init and plan steps
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # Returns whether a plan was successfully generated or not
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
   # TODO plan outputs not support with tf cloud
    # - name: Compress TF Plan artifact
    #   run: zip -r ${{ inputs.terraform_project }}-${{ inputs.env }}.zip ./*
    #
    # - name: Upload Artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: "${{ inputs.terraform_project }}-${{ inputs.env }}"
    #     path: ./"${{ inputs.terraform_project }}-${{ inputs.env }}.zip"
    #     retention-days: 2


# TODO The below did not work in reusable workflow. On Pull request TF Apply would run.

    # # Applies the configuration. This step will only run when a commit is pushed to BRANCH
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/${{ inputs.BRANCH }}' && github.event_name == 'push'
    #   run: |
    #     echo ${{ inputs.BRANCH }}
    #     export TF_WORKSPACE="${{ inputs.TERRAFORM_PROJECT }}-${{ inputs.ENV }}"
    #     cp variables/${{ inputs.ENV }}.auto.tfvars ./
    #     terraform apply -auto-approve
