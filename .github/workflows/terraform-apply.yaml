name: Terraform Apply

on:
  workflow_call:
    inputs:
      terraform_project:
        description: 'The TF workspace prefix/tag'
        required: true
        type: string
      env:
        description: 'The deployment environment'
        required: true
        type: string
      branch:
        description: 'The git branch'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string

    secrets:
      TF_API_TOKEN:
        required: true

jobs:
  terraform-apply:
    name: "Deploy"
    runs-on: ubuntu-latest

     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

     # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf_version }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        export TF_WORKSPACE="${{ inputs.terraform_project }}-${{ inputs.env }}"
        terraform init -input=false
        terraform workspace show

    # Applies the configuration. This step will only run when a commit is pushed to BRANCH
    - name: Terraform Apply
      if: github.ref == 'refs/heads/${{ inputs.branch }}' && github.event_name == 'push'
      run: |
        echo ${{ inputs.branch }}
        export TF_WORKSPACE="${{ inputs.terraform_project }}-${{ inputs.env }}"
        cp variables/${{ inputs.tf_vars_file }} ./
        terraform apply -auto-approve
